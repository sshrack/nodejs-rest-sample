
The following are design notes, which in a real project should be discussed
with the Product Owner and/or Development, to ensure consensus.

* The DELETE method deletes all configured servers, and is an irreversible action. It may be preferable to not support this method.

* The URL for a single server is based on the server 'name' value. The API does not allow changing the 'name' of a server. To accomplish this, the user would need to delete the existing server, and recreate it with the new name.

* Sorting of the server results is only supported for a single attribute (ie. a
single 'sort' key per request). This could be extended to support multiple ordered keys, if necessary.

* Creates/Updates of server data return a status code. They do not return the actual updated server values. This is the usually accepted REST behavior, but not universal. If there is reason to return the server data on a POST/PUT, this could be considered as a change.

* Both POST and PUT are supported for creating or updating a single server. The usual standard is 'POST' for creation of a new resource, and 'PUT' for updating a resource. Since the code in this case is the same, it didn't seem to make sense to do more work to put in an artificial constraint on which one to allow, so they're both allowed for either.

* Sessions do not have a timeout value. This is convenient for testing, but not ideal for security. This would be a recommended extension.

* No logging is currently performed. Addition of audit logging (to track server modifications by user) would likely be helpful. Error logging would also be key for production monitoring of server problems.

* Data is all stored on the filesystem. User, session, and server configurations would all be better stored in a DB. A noSQL DB such as MongoDB could be a good choice for storing JSON-structured server data, and could also work for users and sessions. A standard relDB would also work fine.



